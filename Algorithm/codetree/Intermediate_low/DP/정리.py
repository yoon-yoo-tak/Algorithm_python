"""
dp는 작은 문제를 이용해 큰 문제를 푸는것!

[초기조건] + [점화식]  > 중요

dp > 정형화된 문제 유형이 있다.(코테레벨에서 많아야 8가지) 엄청 많이 풀다보면 익숙해진다.

호석좌는 메모이제이션 잘 안씀 거의 Tabulation으로 해결함 Tabulation 추천함

dp 구현하는 방법 > 외우기
1. dynamic programming TABLE 을 정의
2. 초기조건 삽입
3. 테이블 채우기
4. 실제 정답 구하기


"마지막에 무엇을 했냐"가 중요하다. 진짜 중요하다.

"""

# 1~n까지의 곱 구하기

N = int(input())
# 1. 테이블 정의
# (원래 문제) 구하고싶은 값 : 1 부터 N까지의 곱
dp = [0 for _ in range(N + 1)]

# 2. 초기 조건 삽입
# 가장 작은 문제는 '1부터 1까지의 곱' 이다.
dp[1] = 1

# 3. 테이블 채우기
for i in range(2, N + 1):
    dp[i] = i * dp[i - 1]
# 4. 실제 정답 구하기
print(dp[N])